function D = D_q_dq( model, q, dq, v_wave)
%D_Q_DQ Evaluates the hydrodynamic damping matrix D(q, dq) for the WAVE 
% prototype.
%
%    D = D_Q_DQ( MODEL, Q, DQ, V_WAVE )
%       returns the value of the hydrodynamic damping matrix D(q, dq) 
%       evaluated on the basis of the prototype dynamics parameters for a 
%       particular value of q and its derivative dq.
%
%    This function was generated by the Symbolic Math Toolbox version 5.4.
%    27-Feb-2012 21:40:10

D =  - ( TauDragBody(model,'vehicle', q, dq, v_wave) + ...
    2*TauDragBody(model,'wing', q, dq, v_wave) );
D(4) = D(4) - ( - 2*model.linear_drag.link*dq(4) );

end

function tau = TauDragBody(model, body, q, dq, v_wave)
    % Body samples
    body_samples = model.samples.(body);
    n_samples    = model.n_samples.(body);

    % Velocity of the selected body expressed in the base reference frame
    is_submerged = find(~isnan(v_wave.(body)(1,:)));
    J_body = arrayfun(@(x) Jacobian(model, q, body, [x 0]), ...
        body_samples(is_submerged)', ...
        'UniformOutput', false);
    J_vel = vertcat(J_body{:});
    v_body = reshape(J_vel*dq(1:size(J_vel,2)), 3, length(is_submerged));

    % Relative velocity of the body with respect to the water expressed in
    % the body-fixed reference frame
    body_R_base = RotoTranslation(model, q, body);
    body_R_base = body_R_base([1 3], [1 2])';
    v_rel = blkdiag(body_R_base, 1)*(v_body - v_wave.(body)(:,is_submerged));

    % Drag wrench (forces + moment) applied on the body expressed in the
    % base reference frame
    if isa(model.nonlinear_drag.(body), 'function_handle')
        w_body = cell2mat(arrayfun(@(i) - blkdiag(body_R_base, 1)'*(( model.linear_drag.(body)*v_rel(:,i) + ...
            model.nonlinear_drag.(body)(body_samples(is_submerged(i)))*abs(v_rel(:,i)).*v_rel(:,i) )/n_samples), ...
            1:length(is_submerged), 'uni', false));
    elseif isnumeric(model.nonlinear_drag.(body))
        w_body = - blkdiag(body_R_base, 1)'*(( model.linear_drag.(body)*v_rel + model.nonlinear_drag.(body)*abs(v_rel).*v_rel )/n_samples);
    end

    % Joint torques
    tau = [ sum( reshape(blkdiag(J_body{:})'*reshape(w_body, numel(w_body), 1), size(J_vel,2), size(w_body, 2)), 2 ) ; ...
        zeros(numel(q) - size(J_vel,2), 1) ];
end